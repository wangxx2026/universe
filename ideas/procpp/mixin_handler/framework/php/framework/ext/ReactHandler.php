<?php

/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.8
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

// Try to load our extension if it's not already loaded.
if (!extension_loaded('ReactHandler')) {
  if (strtolower(substr(PHP_OS, 0, 3)) === 'win') {
    if (!dl('php_ReactHandler.dll')) return;
  } else {
    // PHP_SHLIB_SUFFIX gives 'dylib' on MacOS X but modules are 'so'.
    if (PHP_SHLIB_SUFFIX === 'dylib') {
      if (!dl('ReactHandler.so')) return;
    } else {
      if (!dl('ReactHandler.'.PHP_SHLIB_SUFFIX)) return;
    }
  }
}



/* PHP Proxy Classes */
class StringMap {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($arg1=null) {
		if (is_resource($arg1) && get_resource_type($arg1) === '_p_std__mapT_std__string_std__string_t') {
			$this->_cPtr=$arg1;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringMap(); break;
		default: $this->_cPtr=new_StringMap($arg1);
		}
	}

	function size() {
		return StringMap_size($this->_cPtr);
	}

	function clear() {
		StringMap_clear($this->_cPtr);
	}

	function get($key) {
		return StringMap_get($this->_cPtr,$key);
	}

	function set($key,$x) {
		StringMap_set($this->_cPtr,$key,$x);
	}

	function del($key) {
		StringMap_del($this->_cPtr,$key);
	}

	function has_key($key) {
		return StringMap_has_key($this->_cPtr,$key);
	}

	function is_empty() {
		return StringMap_is_empty($this->_cPtr);
	}
}

class StringPair {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'first') return StringPair_first_set($this->_cPtr,$value);
		if ($var === 'second') return StringPair_second_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'first') return StringPair_first_get($this->_cPtr);
		if ($var === 'second') return StringPair_second_get($this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('StringPair_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($first_or_p=null,$second=null) {
		if (is_resource($first_or_p) && get_resource_type($first_or_p) === '_p_std__pairT_std__string_std__string_t') {
			$this->_cPtr=$first_or_p;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringPair(); break;
		case 1: $this->_cPtr=new_StringPair($first_or_p); break;
		default: $this->_cPtr=new_StringPair($first_or_p,$second);
		}
	}
}

class StringPairVector {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($n=null) {
		if (is_resource($n) && get_resource_type($n) === '_p_std__vectorT_std__pairT_std__string_std__string_t_t') {
			$this->_cPtr=$n;
			return;
		}
		switch (func_num_args()) {
		case 0: $this->_cPtr=new_StringPairVector(); break;
		default: $this->_cPtr=new_StringPairVector($n);
		}
	}

	function size() {
		return StringPairVector_size($this->_cPtr);
	}

	function capacity() {
		return StringPairVector_capacity($this->_cPtr);
	}

	function reserve($n) {
		StringPairVector_reserve($this->_cPtr,$n);
	}

	function clear() {
		StringPairVector_clear($this->_cPtr);
	}

	function push($x) {
		StringPairVector_push($this->_cPtr,$x);
	}

	function is_empty() {
		return StringPairVector_is_empty($this->_cPtr);
	}

	function pop() {
		$r=StringPairVector_pop($this->_cPtr);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringPair($r);
		}
		return $r;
	}

	function get($i) {
		$r=StringPairVector_get($this->_cPtr,$i);
		if (is_resource($r)) {
			$c=substr(get_resource_type($r), (strpos(get_resource_type($r), '__') ? strpos(get_resource_type($r), '__') + 2 : 3));
			if (class_exists($c)) return new $c($r);
			return new StringPair($r);
		}
		return $r;
	}

	function set($i,$val) {
		StringPairVector_set($this->_cPtr,$i,$val);
	}
}

class ClientServer {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function listen($port,$proto,$domain=null) {
		switch (func_num_args()) {
		case 2: $r=ClientServer_listen($this->_cPtr,$port,$proto); break;
		default: $r=ClientServer_listen($this->_cPtr,$port,$proto,$domain);
		}
		return $r;
	}

	function event_loop() {
		ClientServer_event_loop($this->_cPtr);
	}

	function set_worker_num($worker_num) {
		ClientServer_set_worker_num($this->_cPtr,$worker_num);
	}

	function set_parent($host,$port) {
		return ClientServer_set_parent($this->_cPtr,$host,$port);
	}

	function daemonize($std_out="/tmp/stdout.log",$std_err="/tmp/stderr.log",$std_in="/dev/null") {
		ClientServer_daemonize($this->_cPtr,$std_out,$std_err,$std_in);
	}

	function write_global($session_id,$data) {
		return ClientServer_write_global($this->_cPtr,$session_id,$data);
	}

	function get_session_id($client) {
		return ClientServer_get_session_id($this->_cPtr,$client);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_ClientServer') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_ClientServer();
	}
}

class WebSocketMessage {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'WebSocketMessage_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'WebSocketMessage_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('WebSocketMessage_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_WebSocketMessage') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_WebSocketMessage();
	}
}

class WebSocket {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}

	const OPCODE_TEXT_FRAME = WebSocket_OPCODE_TEXT_FRAME;

	function send($client,$message,$opcode=null,$fin=true) {
		switch (func_num_args()) {
		case 2: $r=WebSocket_send($this->_cPtr,$client,$message); break;
		default: $r=WebSocket_send($this->_cPtr,$client,$message,$opcode,$fin);
		}
		return $r;
	}
}

class WebSocketClientServer {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_WebSocketClientServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_WebSocketClientServer($port); break;
		default: $this->_cPtr=new_WebSocketClientServer($port,$domain);
		}
	}
}

class WebSocketCallback {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function run($m,$ws) {
		WebSocketCallback_run($this->_cPtr,$m,$ws);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_WebSocketCallback') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'WebSocketCallback') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_WebSocketCallback($_this);
	}
}

class WebSocketServer extends WebSocketClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		WebSocketClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return WebSocketClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return WebSocketClientServer::__isset($var);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_WebSocketServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_WebSocketServer($port); break;
		default: $this->_cPtr=new_WebSocketServer($port,$domain);
		}
	}

	function on($event,$cb) {
		WebSocketServer_on($this->_cPtr,$event,$cb);
	}
}

class HttpClientServer extends ClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		ClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return ClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return ClientServer::__isset($var);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_HttpClientServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_HttpClientServer($port); break;
		default: $this->_cPtr=new_HttpClientServer($port,$domain);
		}
	}
}

class HttpGatewayClientServer extends ClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		ClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return ClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return ClientServer::__isset($var);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_HttpGatewayClientServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_HttpGatewayClientServer($port); break;
		default: $this->_cPtr=new_HttpGatewayClientServer($port,$domain);
		}
	}
}

class HttpRequest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'HttpRequest_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'headers') return new StringMap(HttpRequest_headers_get($this->_cPtr));
		$func = 'HttpRequest_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('HttpRequest_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_HttpRequest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_HttpRequest();
	}
}

class HttpResponse {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'HttpResponse_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'headers') return new StringPairVector(HttpResponse_headers_get($this->_cPtr));
		$func = 'HttpResponse_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('HttpResponse_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_HttpResponse') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_HttpResponse();
	}
}

class HttpProviderAddress {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'HttpProviderAddress_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'HttpProviderAddress_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('HttpProviderAddress_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_HttpProviderAddress') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_HttpProviderAddress();
	}
}

class BoolWrapper {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'ok') return BoolWrapper_ok_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'ok') return BoolWrapper_ok_get($this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('BoolWrapper_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($v) {
		if (is_resource($v) && get_resource_type($v) === '_p_BoolWrapper') {
			$this->_cPtr=$v;
			return;
		}
		$this->_cPtr=new_BoolWrapper($v);
	}
}

class HttpCallback {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function run($req,$resp) {
		HttpCallback_run($this->_cPtr,$req,$resp);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_HttpCallback') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'HttpCallback') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_HttpCallback($_this);
	}
}

class HttpGatewayCallback {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function on_request_uri($req,$target_address,$ok) {
		HttpGatewayCallback_on_request_uri($this->_cPtr,$req,$target_address,$ok);
	}

	function on_response($request,$response) {
		HttpGatewayCallback_on_response($this->_cPtr,$request,$response);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_HttpGatewayCallback') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'HttpGatewayCallback') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_HttpGatewayCallback($_this);
	}
}

class HttpServer extends HttpClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		HttpClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return HttpClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return HttpClientServer::__isset($var);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_HttpServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_HttpServer($port); break;
		default: $this->_cPtr=new_HttpServer($port,$domain);
		}
	}

	function on($event,$cb) {
		HttpServer_on($this->_cPtr,$event,$cb);
	}
}

class HttpGatewayServer extends HttpGatewayClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		HttpGatewayClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return HttpGatewayClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return HttpGatewayClientServer::__isset($var);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_HttpGatewayServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_HttpGatewayServer($port); break;
		default: $this->_cPtr=new_HttpGatewayServer($port,$domain);
		}
	}

	function register_callback($cb) {
		HttpGatewayServer_register_callback($this->_cPtr,$cb);
	}
}

class SocksClientServer {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_SocksClientServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_SocksClientServer($port); break;
		default: $this->_cPtr=new_SocksClientServer($port,$domain);
		}
	}
}

class SocksServer extends SocksClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		SocksClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return SocksClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return SocksClientServer::__isset($var);
	}
	function __construct($h) {
		$this->_cPtr=$h;
	}
}

class SoaRequest {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		$func = 'SoaRequest_'.$var.'_set';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		$func = 'SoaRequest_'.$var.'_get';
		if (function_exists($func)) return call_user_func($func,$this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('SoaRequest_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_SoaRequest') {
			$this->_cPtr=$res;
			return;
		}
		$this->_cPtr=new_SoaRequest();
	}
}

class SoaResponse {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'json') return SoaResponse_json_set($this->_cPtr,$value);
		if ($var === 'uuid') return SoaResponse_uuid_set($this->_cPtr,$value);
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'json') return SoaResponse_json_get($this->_cPtr);
		if ($var === 'uuid') return SoaResponse_uuid_get($this->_cPtr);
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if (function_exists('SoaResponse_'.$var.'_get')) return true;
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($generate=true) {
		if (is_resource($generate) && get_resource_type($generate) === '_p_SoaResponse') {
			$this->_cPtr=$generate;
			return;
		}
		$this->_cPtr=new_SoaResponse($generate);
	}

	function to_string() {
		return SoaResponse_to_string($this->_cPtr);
	}
}

class SoaClientServer extends ClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		ClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return ClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return ClientServer::__isset($var);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_SoaClientServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_SoaClientServer($port); break;
		default: $this->_cPtr=new_SoaClientServer($port,$domain);
		}
	}
}

class SoaCallback {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function run($request,$response) {
		SoaCallback_run($this->_cPtr,$request,$response);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_SoaCallback') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'SoaCallback') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_SoaCallback($_this);
	}
}

class SoaServer extends SoaClientServer {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		SoaClientServer::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return SoaClientServer::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return SoaClientServer::__isset($var);
	}

	function __construct($port,$domain=null) {
		if (is_resource($port) && get_resource_type($port) === '_p_SoaServer') {
			$this->_cPtr=$port;
			return;
		}
		switch (func_num_args()) {
		case 1: $this->_cPtr=new_SoaServer($port); break;
		default: $this->_cPtr=new_SoaServer($port,$domain);
		}
	}

	function on($event,$cb) {
		SoaServer_on($this->_cPtr,$event,$cb);
	}
}

class Soa {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($address,$port,$auto_reconnect) {
		if (is_resource($address) && get_resource_type($address) === '_p_C__Soa') {
			$this->_cPtr=$address;
			return;
		}
		$this->_cPtr=new_Soa($address,$port,$auto_reconnect);
	}
}

class SoaClientCallback {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function run($json) {
		SoaClientCallback_run($this->_cPtr,$json);
	}

	function __construct($res=null) {
		if (is_resource($res) && get_resource_type($res) === '_p_SoaClientCallback') {
			$this->_cPtr=$res;
			return;
		}
		if (get_class($this) === 'SoaClientCallback') {
			$_this = null;
		} else {
			$_this = $this;
		}
		$this->_cPtr=new_SoaClientCallback($_this);
	}
}

class SoaClient extends Soa {
	public $_cPtr=null;

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		Soa::__set($var,$value);
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return Soa::__get($var);
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return Soa::__isset($var);
	}

	function __construct($address,$port,$auto_reconnect=true) {
		if (is_resource($address) && get_resource_type($address) === '_p_SoaClient') {
			$this->_cPtr=$address;
			return;
		}
		$this->_cPtr=new_SoaClient($address,$port,$auto_reconnect);
	}

	function call($json_request,$cb=null) {
		return SoaClient_call($this->_cPtr,$json_request,$cb);
	}

	function wait($requests,$milliseconds) {
		return SoaClient_wait($this->_cPtr,$requests,$milliseconds);
	}

	function wait_n($n,$milliseconds) {
		return SoaClient_wait_n($this->_cPtr,$n,$milliseconds);
	}

	function register_push_callback($cb) {
		SoaClient_register_push_callback($this->_cPtr,$cb);
	}
}

class Proxy {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($server,$l) {
		if (is_resource($server) && get_resource_type($server) === '_p_Proxy') {
			$this->_cPtr=$server;
			return;
		}
		$this->_cPtr=new_Proxy($server,$l);
	}
}

class Remote {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($server,$l,$port) {
		if (is_resource($server) && get_resource_type($server) === '_p_Remote') {
			$this->_cPtr=$server;
			return;
		}
		$this->_cPtr=new_Remote($server,$l,$port);
	}
}

class Trie {
	public $_cPtr=null;
	protected $_pData=array();

	function __set($var,$value) {
		if ($var === 'thisown') return swig_ReactHandler_alter_newobject($this->_cPtr,$value);
		$this->_pData[$var] = $value;
	}

	function __get($var) {
		if ($var === 'thisown') return swig_ReactHandler_get_newobject($this->_cPtr);
		return $this->_pData[$var];
	}

	function __isset($var) {
		if ($var === 'thisown') return true;
		return array_key_exists($var, $this->_pData);
	}

	function __construct($keywords) {
		if (is_resource($keywords) && get_resource_type($keywords) === '_p_Trie') {
			$this->_cPtr=$keywords;
			return;
		}
		$this->_cPtr=new_Trie($keywords);
	}

	function search($text,$no_overlap=true) {
		return Trie_search($this->_cPtr,$text,$no_overlap);
	}
}


?>
